const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const Database = require('../database/database');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('slots')
        .setDescription('Ch∆°i m√°y ƒë√°nh b·∫°c')
        .addIntegerOption(option =>
            option.setName('amount')
                .setDescription('S·ªë ti·ªÅn c∆∞·ª£c (t·ªëi thi·ªÉu 10)')
                .setRequired(true)
                .setMinValue(10)),
    
    async execute(interaction) {
        const userId = interaction.user.id;
        const amount = interaction.options.getInteger('amount');
        
        try {
            const balance = await Database.getBalance(userId);
            
            if (balance < amount) {
                return await interaction.reply({ 
                    content: `‚ùå B·∫°n kh√¥ng ƒë·ªß ti·ªÅn! S·ªë d∆∞ hi·ªán t·∫°i: **${balance.toLocaleString()}** coins`, 
                    ephemeral: true 
                });
            }
            
            const symbols = ['üçé', 'üçä', 'üçã', 'üçá', 'üçì', 'üíé'];
            const reels = [
                symbols[Math.floor(Math.random() * symbols.length)],
                symbols[Math.floor(Math.random() * symbols.length)],
                symbols[Math.floor(Math.random() * symbols.length)]
            ];
            
            let multiplier = 0;
            let result = '';
            
            // Check for wins
            if (reels[0] === reels[1] && reels[1] === reels[2]) {
                // Three of a kind
                if (reels[0] === 'üíé') {
                    multiplier = 10; // Diamond jackpot
                    result = 'üíé JACKPOT! üíé';
                } else {
                    multiplier = 5;
                    result = 'üéâ Ba c√πng lo·∫°i!';
                }
            } else if (reels[0] === reels[1] || reels[1] === reels[2] || reels[0] === reels[2]) {
                // Two of a kind
                multiplier = 2;
                result = 'üéä Hai c√πng lo·∫°i!';
            } else {
                result = 'üò¢ Kh√¥ng tr√∫ng!';
            }
            
            const embed = new EmbedBuilder()
                .setTitle('üé∞ Slot Machine')
                .setDescription(`**[ ${reels.join(' | ')} ]**\n\n${result}`)
                .setColor(multiplier > 0 ? '#00ff00' : '#ff0000')
                .setTimestamp();
            
            if (multiplier > 0) {
                const winAmount = amount * multiplier;
                await Database.addBalance(userId, winAmount - amount); // Subtract original bet
                await Database.updateStats(userId, 'slots', true);
                embed.addFields({ name: 'üí∞ Th·∫Øng', value: `+${(winAmount - amount).toLocaleString()} coins (x${multiplier})`, inline: true });
            } else {
                await Database.removeBalance(userId, amount);
                await Database.updateStats(userId, 'slots', false);
                embed.addFields({ name: 'üí∏ Thua', value: `-${amount.toLocaleString()} coins`, inline: true });
            }
            
            await interaction.reply({ embeds: [embed] });
            
        } catch (error) {
            console.error('Slots command error:', error);
            await interaction.reply({ 
                content: '‚ùå C√≥ l·ªói x·∫£y ra khi ch∆°i slots!', 
                ephemeral: true 
            });
        }
    }
};