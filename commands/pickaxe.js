const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const Database = require('../database/database');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('pickaxe')
        .setDescription('Xem th√¥ng tin cu·ªëc c·ªßa b·∫°n'),
    
    async execute(interaction) {
        const userId = interaction.user.id;
        
        try {
            const inventory = await Database.getInventory(userId);
            const pickaxeLevel = inventory.pickaxe || 1;
            
            const pickaxeInfo = {
                1: { name: 'Cu·ªëc G·ªó', emoji: '‚õèÔ∏è', efficiency: '1x', next: 'Cu·ªëc ƒê√° (500 coins)' },
                2: { name: 'Cu·ªëc ƒê√°', emoji: '‚õèÔ∏è', efficiency: '1.5x', next: 'Cu·ªëc S·∫Øt (2000 coins)' },
                3: { name: 'Cu·ªëc S·∫Øt', emoji: '‚õèÔ∏è', efficiency: '2x', next: 'Cu·ªëc V√†ng (5000 coins)' },
                4: { name: 'Cu·ªëc V√†ng', emoji: '‚õèÔ∏è', efficiency: '2.5x', next: 'Cu·ªëc Kim C∆∞∆°ng (15000 coins)' },
                5: { name: 'Cu·ªëc Kim C∆∞∆°ng', emoji: 'üíé', efficiency: '3x', next: 'MAX LEVEL!' }
            };
            
            const current = pickaxeInfo[pickaxeLevel];
            
            const embed = new EmbedBuilder()
                .setTitle('‚õèÔ∏è Th√¥ng tin cu·ªëc')
                .setColor('#8B4513')
                .addFields(
                    { name: 'üîß Cu·ªëc hi·ªán t·∫°i', value: `${current.emoji} **${current.name}** (Level ${pickaxeLevel})`, inline: true },
                    { name: '‚ö° Hi·ªáu su·∫•t', value: current.efficiency, inline: true },
                    { name: 'üìà N√¢ng c·∫•p ti·∫øp theo', value: current.next, inline: false }
                )
                .setTimestamp();
            
            await interaction.reply({ embeds: [embed] });
            
        } catch (error) {
            console.error('Pickaxe command error:', error);
            await interaction.reply({ 
                content: '‚ùå C√≥ l·ªói x·∫£y ra khi xem th√¥ng tin cu·ªëc!', 
                ephemeral: true 
            });
        }
    }
};