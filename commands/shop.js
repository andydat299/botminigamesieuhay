const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const Database = require('../database/database');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('shop')
        .setDescription('Mua ƒë·ªì t·ª´ c·ª≠a h√†ng')
        .addStringOption(option =>
            option.setName('item')
                .setDescription('V·∫≠t ph·∫©m mu·ªën mua')
                .setRequired(true)
                .addChoices(
                    { name: '‚õèÔ∏è Cu·ªëc ƒê√° (500 coins)', value: 'stone_pickaxe' },
                    { name: '‚õèÔ∏è Cu·ªëc S·∫Øt (2000 coins)', value: 'iron_pickaxe' },
                    { name: '‚õèÔ∏è Cu·ªëc V√†ng (5000 coins)', value: 'gold_pickaxe' },
                    { name: '‚õèÔ∏è Cu·ªëc Kim C∆∞∆°ng (15000 coins)', value: 'diamond_pickaxe' }
                )),
    
    async execute(interaction) {
        const userId = interaction.user.id;
        const item = interaction.options.getString('item');
        
        try {
            const balance = await Database.getBalance(userId);
            const inventory = await Database.getInventory(userId);
            
            const items = {
                stone_pickaxe: { name: 'Cu·ªëc ƒê√°', price: 500, level: 2 },
                iron_pickaxe: { name: 'Cu·ªëc S·∫Øt', price: 2000, level: 3 },
                gold_pickaxe: { name: 'Cu·ªëc V√†ng', price: 5000, level: 4 },
                diamond_pickaxe: { name: 'Cu·ªëc Kim C∆∞∆°ng', price: 15000, level: 5 }
            };
            
            const itemData = items[item];
            if (!itemData) {
                return await interaction.reply({ 
                    content: '‚ùå V·∫≠t ph·∫©m kh√¥ng t·ªìn t·∫°i!', 
                    ephemeral: true 
                });
            }
            
            if (balance < itemData.price) {
                return await interaction.reply({ 
                    content: `‚ùå B·∫°n kh√¥ng ƒë·ªß ti·ªÅn! C·∫ßn **${itemData.price.toLocaleString()}** coins, b·∫°n c√≥ **${balance.toLocaleString()}** coins`, 
                    ephemeral: true 
                });
            }
            
            const currentPickaxeLevel = inventory.pickaxe || 1;
            if (currentPickaxeLevel >= itemData.level) {
                return await interaction.reply({ 
                    content: `‚ùå B·∫°n ƒë√£ c√≥ cu·ªëc level ${currentPickaxeLevel} r·ªìi!`, 
                    ephemeral: true 
                });
            }
            
            if (itemData.level > currentPickaxeLevel + 1) {
                return await interaction.reply({ 
                    content: `‚ùå B·∫°n c·∫ßn n√¢ng c·∫•p cu·ªëc theo th·ª© t·ª±! Cu·ªëc hi·ªán t·∫°i: Level ${currentPickaxeLevel}`, 
                    ephemeral: true 
                });
            }
            
            await Database.removeBalance(userId, itemData.price);
            await Database.updateInventory(userId, 'pickaxe', itemData.level);
            
            const embed = new EmbedBuilder()
                .setTitle('üõí Mua h√†ng th√†nh c√¥ng!')
                .setDescription(`B·∫°n ƒë√£ mua **‚õèÔ∏è ${itemData.name}** v·ªõi gi√° **${itemData.price.toLocaleString()}** coins`)
                .setColor('#00ff00')
                .setTimestamp();
            
            await interaction.reply({ embeds: [embed] });
            
        } catch (error) {
            console.error('Shop command error:', error);
            await interaction.reply({ 
                content: '‚ùå C√≥ l·ªói x·∫£y ra khi mua h√†ng!', 
                ephemeral: true 
            });
        }
    }
};