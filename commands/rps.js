const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const Database = require('../database/database');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('rps')
        .setDescription('Ch∆°i k√©o b√∫a bao v·ªõi bot')
        .addStringOption(option =>
            option.setName('choice')
                .setDescription('L·ª±a ch·ªçn c·ªßa b·∫°n')
                .setRequired(true)
                .addChoices(
                    { name: '‚úÇÔ∏è K√©o', value: 'scissors' },
                    { name: 'üóø ƒê√°', value: 'rock' },
                    { name: 'üìÑ Gi·∫•y', value: 'paper' }
                ))
        .addIntegerOption(option =>
            option.setName('amount')
                .setDescription('S·ªë ti·ªÅn c∆∞·ª£c (t·ªëi thi·ªÉu 10)')
                .setRequired(true)
                .setMinValue(10)),

    async execute(interaction) {
        const userId = interaction.user.id;
        const userChoice = interaction.options.getString('choice');
        const amount = interaction.options.getInteger('amount');

        try {
            const balance = await Database.getBalance(userId);

            if (balance < amount) {
                return await interaction.reply({
                    content: `‚ùå B·∫°n kh√¥ng ƒë·ªß ti·ªÅn! S·ªë d∆∞ hi·ªán t·∫°i: **${balance.toLocaleString()}** coins`,
                    ephemeral: true
                });
            }

            const choices = ['rock', 'paper', 'scissors'];
            const botChoice = choices[Math.floor(Math.random() * choices.length)];

            const choiceEmojis = {
                rock: 'üóø',
                paper: 'üìÑ',
                scissors: '‚úÇÔ∏è'
            };

            let result;
            if (userChoice === botChoice) {
                result = 'tie';
            } else if (
                (userChoice === 'rock' && botChoice === 'scissors') ||
                (userChoice === 'paper' && botChoice === 'rock') ||
                (userChoice === 'scissors' && botChoice === 'paper')
            ) {
                result = 'win';
            } else {
                result = 'lose';
            }

            const embed = new EmbedBuilder()
                .setTitle('‚úÇÔ∏èüóøüìÑ Rock Paper Scissors')
                .setColor(result === 'win' ? '#00ff00' : result === 'lose' ? '#ff0000' : '#ffff00')
                .setTimestamp();

            if (result === 'win') {
                await Database.addBalance(userId, amount);
                await Database.updateStats(userId, 'rps', true);
                embed.setDescription(`üéâ **Th·∫Øng!**\n\nB·∫°n: ${choiceEmojis[userChoice]}\nBot: ${choiceEmojis[botChoice]}\n\nüí∞ +${amount.toLocaleString()} coins`);
            } else if (result === 'lose') {
                await Database.removeBalance(userId, amount);
                await Database.updateStats(userId, 'rps', false);
                embed.setDescription(`üò¢ **Thua!**\n\nB·∫°n: ${choiceEmojis[userChoice]}\nBot: ${choiceEmojis[botChoice]}\n\nüí∏ -${amount.toLocaleString()} coins`);
            } else {
                embed.setDescription(`ü§ù **H√≤a!**\n\nB·∫°n: ${choiceEmojis[userChoice]}\nBot: ${choiceEmojis[botChoice]}\n\nüí∞ Kh√¥ng m·∫•t ti·ªÅn`);
            }

            await interaction.reply({ embeds: [embed] });

        } catch (error) {
            console.error('RPS command error:', error);
            await interaction.reply({
                content: '‚ùå C√≥ l·ªói x·∫£y ra khi ch∆°i RPS!',
                ephemeral: true
            });
        }
    }
};